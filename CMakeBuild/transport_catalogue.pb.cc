// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace serializator {
PROTOBUF_CONSTEXPR Coordinates::Coordinates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatesDefaultTypeInternal() {}
  union {
    Coordinates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
PROTOBUF_CONSTEXPR BusStop::BusStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coordinates_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusStopDefaultTypeInternal() {}
  union {
    BusStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusStopDefaultTypeInternal _BusStop_default_instance_;
PROTOBUF_CONSTEXPR BusRoute::BusRoute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.circle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusRouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusRouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusRouteDefaultTypeInternal() {}
  union {
    BusRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusRouteDefaultTypeInternal _BusRoute_default_instance_;
PROTOBUF_CONSTEXPR RouteStats::RouteStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/0
  , /*decltype(_impl_.unique_stops_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteStatsDefaultTypeInternal() {}
  union {
    RouteStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteStatsDefaultTypeInternal _RouteStats_default_instance_;
PROTOBUF_CONSTEXPR RouteSettings::RouteSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_.bus_wait_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteSettingsDefaultTypeInternal() {}
  union {
    RouteSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteSettingsDefaultTypeInternal _RouteSettings_default_instance_;
PROTOBUF_CONSTEXPR RouteItem::RouteItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_stop_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_stop_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.route_time_)*/0
  , /*decltype(_impl_.wait_time_)*/0
  , /*decltype(_impl_.span_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteItemDefaultTypeInternal() {}
  union {
    RouteItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteItemDefaultTypeInternal _RouteItem_default_instance_;
PROTOBUF_CONSTEXPR RouteResponse::RouteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.total_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteResponseDefaultTypeInternal() {}
  union {
    RouteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteResponseDefaultTypeInternal _RouteResponse_default_instance_;
PROTOBUF_CONSTEXPR StopDistance::StopDistance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_stop_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_stop_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDistanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDistanceDefaultTypeInternal() {}
  union {
    StopDistance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDistanceDefaultTypeInternal _StopDistance_default_instance_;
PROTOBUF_CONSTEXPR Base::Base(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buses_)*/{}
  , /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.stop_distance_map_)*/{}
  , /*decltype(_impl_.map_settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseDefaultTypeInternal() {}
  union {
    Base _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseDefaultTypeInternal _Base_default_instance_;
}  // namespace serializator
static ::_pb::Metadata file_level_metadata_transport_5fcatalogue_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::Coordinates, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::serializator::Coordinates, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::BusStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::BusStop, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::serializator::BusStop, _impl_.coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::BusRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::BusRoute, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::serializator::BusRoute, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::serializator::BusRoute, _impl_.circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteStats, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteStats, _impl_.unique_stops_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteStats, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteStats, _impl_.curvature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteSettings, _impl_.bus_velocity_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteSettings, _impl_.bus_wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.bus_name_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.from_stop_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.to_stop_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.route_time_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.wait_time_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteItem, _impl_.span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::RouteResponse, _impl_.total_time_),
  PROTOBUF_FIELD_OFFSET(::serializator::RouteResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::StopDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::StopDistance, _impl_.from_stop_),
  PROTOBUF_FIELD_OFFSET(::serializator::StopDistance, _impl_.to_stop_),
  PROTOBUF_FIELD_OFFSET(::serializator::StopDistance, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serializator::Base, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serializator::Base, _impl_.buses_),
  PROTOBUF_FIELD_OFFSET(::serializator::Base, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::serializator::Base, _impl_.stop_distance_map_),
  PROTOBUF_FIELD_OFFSET(::serializator::Base, _impl_.map_settings_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::serializator::Coordinates)},
  { 8, -1, -1, sizeof(::serializator::BusStop)},
  { 16, -1, -1, sizeof(::serializator::BusRoute)},
  { 25, -1, -1, sizeof(::serializator::RouteStats)},
  { 35, -1, -1, sizeof(::serializator::RouteSettings)},
  { 43, -1, -1, sizeof(::serializator::RouteItem)},
  { 55, -1, -1, sizeof(::serializator::RouteResponse)},
  { 63, -1, -1, sizeof(::serializator::StopDistance)},
  { 72, -1, -1, sizeof(::serializator::Base)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::serializator::_Coordinates_default_instance_._instance,
  &::serializator::_BusStop_default_instance_._instance,
  &::serializator::_BusRoute_default_instance_._instance,
  &::serializator::_RouteStats_default_instance_._instance,
  &::serializator::_RouteSettings_default_instance_._instance,
  &::serializator::_RouteItem_default_instance_._instance,
  &::serializator::_RouteResponse_default_instance_._instance,
  &::serializator::_StopDistance_default_instance_._instance,
  &::serializator::_Base_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\014serializato"
  "r\032\022map_renderer.proto\"2\n\013Coordinates\022\020\n\010"
  "latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\"G\n\007Bus"
  "Stop\022\014\n\004name\030\001 \001(\t\022.\n\013coordinates\030\002 \001(\0132"
  "\031.serializator.Coordinates\"P\n\010BusRoute\022\016"
  "\n\006number\030\001 \001(\t\022$\n\005stops\030\002 \003(\0132\025.serializ"
  "ator.BusStop\022\016\n\006circle\030\003 \001(\010\"V\n\nRouteSta"
  "ts\022\r\n\005stops\030\001 \001(\005\022\024\n\014unique_stops\030\002 \001(\005\022"
  "\020\n\010distance\030\003 \001(\001\022\021\n\tcurvature\030\004 \001(\001\"<\n\r"
  "RouteSettings\022\024\n\014bus_velocity\030\001 \001(\001\022\025\n\rb"
  "us_wait_time\030\002 \001(\001\"|\n\tRouteItem\022\020\n\010bus_n"
  "ame\030\001 \001(\t\022\021\n\tfrom_stop\030\002 \001(\t\022\017\n\007to_stop\030"
  "\003 \001(\t\022\022\n\nroute_time\030\004 \001(\001\022\021\n\twait_time\030\005"
  " \001(\001\022\022\n\nspan_count\030\006 \001(\005\"K\n\rRouteRespons"
  "e\022\022\n\ntotal_time\030\001 \001(\001\022&\n\005items\030\002 \003(\0132\027.s"
  "erializator.RouteItem\"D\n\014StopDistance\022\021\n"
  "\tfrom_stop\030\001 \001(\t\022\017\n\007to_stop\030\002 \001(\t\022\020\n\010dis"
  "tance\030\003 \001(\001\"\276\001\n\004Base\022%\n\005buses\030\001 \003(\0132\026.se"
  "rializator.BusRoute\022$\n\005stops\030\002 \003(\0132\025.ser"
  "ializator.BusStop\0225\n\021stop_distance_map\030\003"
  " \003(\0132\032.serializator.StopDistance\0222\n\014map_"
  "settings\030\004 \001(\0132\034.serializator.RenderSett"
  "ingsb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_transport_5fcatalogue_2eproto_deps[1] = {
  &::descriptor_table_map_5frenderer_2eproto,
};
static ::_pbi::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
    false, false, 892, descriptor_table_protodef_transport_5fcatalogue_2eproto,
    "transport_catalogue.proto",
    &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
    file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto,
    file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace serializator {

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coordinates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:serializator.Coordinates)
}

inline void Coordinates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:serializator.Coordinates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coordinates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.Coordinates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coordinates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.Coordinates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.Coordinates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coordinates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coordinates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coordinates::GetClassData() const { return &_class_data_; }


void Coordinates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coordinates*>(&to_msg);
  auto& from = static_cast<const Coordinates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.Coordinates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, _impl_.longitude_)
      + sizeof(Coordinates::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class BusStop::_Internal {
 public:
  static const ::serializator::Coordinates& coordinates(const BusStop* msg);
};

const ::serializator::Coordinates&
BusStop::_Internal::coordinates(const BusStop* msg) {
  return *msg->_impl_.coordinates_;
}
BusStop::BusStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.BusStop)
}
BusStop::BusStop(const BusStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BusStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.coordinates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_coordinates()) {
    _this->_impl_.coordinates_ = new ::serializator::Coordinates(*from._impl_.coordinates_);
  }
  // @@protoc_insertion_point(copy_constructor:serializator.BusStop)
}

inline void BusStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.coordinates_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BusStop::~BusStop() {
  // @@protoc_insertion_point(destructor:serializator.BusStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BusStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coordinates_;
}

void BusStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BusStop::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.BusStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.BusStop.name"));
        } else
          goto handle_unusual;
        continue;
      // .serializator.Coordinates coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BusStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.BusStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.BusStop.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .serializator.Coordinates coordinates = 2;
  if (this->_internal_has_coordinates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coordinates(this),
        _Internal::coordinates(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.BusStop)
  return target;
}

size_t BusStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.BusStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .serializator.Coordinates coordinates = 2;
  if (this->_internal_has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinates_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BusStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusStop::GetClassData() const { return &_class_data_; }


void BusStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BusStop*>(&to_msg);
  auto& from = static_cast<const BusStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.BusStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_coordinates()) {
    _this->_internal_mutable_coordinates()->::serializator::Coordinates::MergeFrom(
        from._internal_coordinates());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusStop::CopyFrom(const BusStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.BusStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusStop::IsInitialized() const {
  return true;
}

void BusStop::InternalSwap(BusStop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.coordinates_, other->_impl_.coordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

class BusRoute::_Internal {
 public:
};

BusRoute::BusRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.BusRoute)
}
BusRoute::BusRoute(const BusRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BusRoute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.number_){}
    , decltype(_impl_.circle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.circle_ = from._impl_.circle_;
  // @@protoc_insertion_point(copy_constructor:serializator.BusRoute)
}

inline void BusRoute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena}
    , decltype(_impl_.number_){}
    , decltype(_impl_.circle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BusRoute::~BusRoute() {
  // @@protoc_insertion_point(destructor:serializator.BusRoute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BusRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
  _impl_.number_.Destroy();
}

void BusRoute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BusRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.BusRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _impl_.number_.ClearToEmpty();
  _impl_.circle_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusRoute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.BusRoute.number"));
        } else
          goto handle_unusual;
        continue;
      // repeated .serializator.BusStop stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool circle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BusRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.BusRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.BusRoute.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  // repeated .serializator.BusStop stops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool circle = 3;
  if (this->_internal_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_circle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.BusRoute)
  return target;
}

size_t BusRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.BusRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serializator.BusStop stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string number = 1;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // bool circle = 3;
  if (this->_internal_circle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BusRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusRoute::GetClassData() const { return &_class_data_; }


void BusRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BusRoute*>(&to_msg);
  auto& from = static_cast<const BusRoute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.BusRoute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_circle() != 0) {
    _this->_internal_set_circle(from._internal_circle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusRoute::CopyFrom(const BusRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.BusRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusRoute::IsInitialized() const {
  return true;
}

void BusRoute::InternalSwap(BusRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  swap(_impl_.circle_, other->_impl_.circle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusRoute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class RouteStats::_Internal {
 public:
};

RouteStats::RouteStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.RouteStats)
}
RouteStats::RouteStats(const RouteStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){}
    , decltype(_impl_.unique_stops_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.curvature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stops_, &from._impl_.stops_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curvature_) -
    reinterpret_cast<char*>(&_impl_.stops_)) + sizeof(_impl_.curvature_));
  // @@protoc_insertion_point(copy_constructor:serializator.RouteStats)
}

inline void RouteStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){0}
    , decltype(_impl_.unique_stops_){0}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.curvature_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteStats::~RouteStats() {
  // @@protoc_insertion_point(destructor:serializator.RouteStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteStats::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.RouteStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curvature_) -
      reinterpret_cast<char*>(&_impl_.stops_)) + sizeof(_impl_.curvature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unique_stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unique_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.RouteStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stops = 1;
  if (this->_internal_stops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stops(), target);
  }

  // int32 unique_stops = 2;
  if (this->_internal_unique_stops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unique_stops(), target);
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  // double curvature = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_curvature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.RouteStats)
  return target;
}

size_t RouteStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.RouteStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stops = 1;
  if (this->_internal_stops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stops());
  }

  // int32 unique_stops = 2;
  if (this->_internal_unique_stops() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unique_stops());
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteStats::GetClassData() const { return &_class_data_; }


void RouteStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteStats*>(&to_msg);
  auto& from = static_cast<const RouteStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.RouteStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stops() != 0) {
    _this->_internal_set_stops(from._internal_stops());
  }
  if (from._internal_unique_stops() != 0) {
    _this->_internal_set_unique_stops(from._internal_unique_stops());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = from._internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    _this->_internal_set_curvature(from._internal_curvature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteStats::CopyFrom(const RouteStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.RouteStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteStats::IsInitialized() const {
  return true;
}

void RouteStats::InternalSwap(RouteStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteStats, _impl_.curvature_)
      + sizeof(RouteStats::_impl_.curvature_)
      - PROTOBUF_FIELD_OFFSET(RouteStats, _impl_.stops_)>(
          reinterpret_cast<char*>(&_impl_.stops_),
          reinterpret_cast<char*>(&other->_impl_.stops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

class RouteSettings::_Internal {
 public:
};

RouteSettings::RouteSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.RouteSettings)
}
RouteSettings::RouteSettings(const RouteSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){}
    , decltype(_impl_.bus_wait_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_velocity_, &from._impl_.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
    reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:serializator.RouteSettings)
}

inline void RouteSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){0}
    , decltype(_impl_.bus_wait_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteSettings::~RouteSettings() {
  // @@protoc_insertion_point(destructor:serializator.RouteSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.RouteSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
      reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bus_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bus_wait_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.RouteSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_velocity(), target);
  }

  // double bus_wait_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.RouteSettings)
  return target;
}

size_t RouteSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.RouteSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  // double bus_wait_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteSettings::GetClassData() const { return &_class_data_; }


void RouteSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteSettings*>(&to_msg);
  auto& from = static_cast<const RouteSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.RouteSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = from._internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteSettings::CopyFrom(const RouteSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.RouteSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSettings::IsInitialized() const {
  return true;
}

void RouteSettings::InternalSwap(RouteSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSettings, _impl_.bus_wait_time_)
      + sizeof(RouteSettings::_impl_.bus_wait_time_)
      - PROTOBUF_FIELD_OFFSET(RouteSettings, _impl_.bus_velocity_)>(
          reinterpret_cast<char*>(&_impl_.bus_velocity_),
          reinterpret_cast<char*>(&other->_impl_.bus_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class RouteItem::_Internal {
 public:
};

RouteItem::RouteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.RouteItem)
}
RouteItem::RouteItem(const RouteItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.from_stop_){}
    , decltype(_impl_.to_stop_){}
    , decltype(_impl_.route_time_){}
    , decltype(_impl_.wait_time_){}
    , decltype(_impl_.span_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_name().empty()) {
    _this->_impl_.bus_name_.Set(from._internal_bus_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_stop().empty()) {
    _this->_impl_.from_stop_.Set(from._internal_from_stop(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_stop().empty()) {
    _this->_impl_.to_stop_.Set(from._internal_to_stop(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.route_time_, &from._impl_.route_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.span_count_) -
    reinterpret_cast<char*>(&_impl_.route_time_)) + sizeof(_impl_.span_count_));
  // @@protoc_insertion_point(copy_constructor:serializator.RouteItem)
}

inline void RouteItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.from_stop_){}
    , decltype(_impl_.to_stop_){}
    , decltype(_impl_.route_time_){0}
    , decltype(_impl_.wait_time_){0}
    , decltype(_impl_.span_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteItem::~RouteItem() {
  // @@protoc_insertion_point(destructor:serializator.RouteItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bus_name_.Destroy();
  _impl_.from_stop_.Destroy();
  _impl_.to_stop_.Destroy();
}

void RouteItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteItem::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.RouteItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bus_name_.ClearToEmpty();
  _impl_.from_stop_.ClearToEmpty();
  _impl_.to_stop_.ClearToEmpty();
  ::memset(&_impl_.route_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.span_count_) -
      reinterpret_cast<char*>(&_impl_.route_time_)) + sizeof(_impl_.span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bus_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.RouteItem.bus_name"));
        } else
          goto handle_unusual;
        continue;
      // string from_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from_stop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.RouteItem.from_stop"));
        } else
          goto handle_unusual;
        continue;
      // string to_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_stop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.RouteItem.to_stop"));
        } else
          goto handle_unusual;
        continue;
      // double route_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.route_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double wait_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 span_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.RouteItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.RouteItem.bus_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus_name(), target);
  }

  // string from_stop = 2;
  if (!this->_internal_from_stop().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_stop().data(), static_cast<int>(this->_internal_from_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.RouteItem.from_stop");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_stop(), target);
  }

  // string to_stop = 3;
  if (!this->_internal_to_stop().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_stop().data(), static_cast<int>(this->_internal_to_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.RouteItem.to_stop");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_stop(), target);
  }

  // double route_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_route_time = this->_internal_route_time();
  uint64_t raw_route_time;
  memcpy(&raw_route_time, &tmp_route_time, sizeof(tmp_route_time));
  if (raw_route_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_route_time(), target);
  }

  // double wait_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wait_time = this->_internal_wait_time();
  uint64_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_wait_time(), target);
  }

  // int32 span_count = 6;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.RouteItem)
  return target;
}

size_t RouteItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.RouteItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // string from_stop = 2;
  if (!this->_internal_from_stop().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_stop());
  }

  // string to_stop = 3;
  if (!this->_internal_to_stop().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_stop());
  }

  // double route_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_route_time = this->_internal_route_time();
  uint64_t raw_route_time;
  memcpy(&raw_route_time, &tmp_route_time, sizeof(tmp_route_time));
  if (raw_route_time != 0) {
    total_size += 1 + 8;
  }

  // double wait_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wait_time = this->_internal_wait_time();
  uint64_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    total_size += 1 + 8;
  }

  // int32 span_count = 6;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_span_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteItem::GetClassData() const { return &_class_data_; }


void RouteItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteItem*>(&to_msg);
  auto& from = static_cast<const RouteItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.RouteItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bus_name().empty()) {
    _this->_internal_set_bus_name(from._internal_bus_name());
  }
  if (!from._internal_from_stop().empty()) {
    _this->_internal_set_from_stop(from._internal_from_stop());
  }
  if (!from._internal_to_stop().empty()) {
    _this->_internal_set_to_stop(from._internal_to_stop());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_route_time = from._internal_route_time();
  uint64_t raw_route_time;
  memcpy(&raw_route_time, &tmp_route_time, sizeof(tmp_route_time));
  if (raw_route_time != 0) {
    _this->_internal_set_route_time(from._internal_route_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wait_time = from._internal_wait_time();
  uint64_t raw_wait_time;
  memcpy(&raw_wait_time, &tmp_wait_time, sizeof(tmp_wait_time));
  if (raw_wait_time != 0) {
    _this->_internal_set_wait_time(from._internal_wait_time());
  }
  if (from._internal_span_count() != 0) {
    _this->_internal_set_span_count(from._internal_span_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteItem::CopyFrom(const RouteItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.RouteItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteItem::IsInitialized() const {
  return true;
}

void RouteItem::InternalSwap(RouteItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_name_, lhs_arena,
      &other->_impl_.bus_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_stop_, lhs_arena,
      &other->_impl_.from_stop_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_stop_, lhs_arena,
      &other->_impl_.to_stop_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteItem, _impl_.span_count_)
      + sizeof(RouteItem::_impl_.span_count_)
      - PROTOBUF_FIELD_OFFSET(RouteItem, _impl_.route_time_)>(
          reinterpret_cast<char*>(&_impl_.route_time_),
          reinterpret_cast<char*>(&other->_impl_.route_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// ===================================================================

class RouteResponse::_Internal {
 public:
};

RouteResponse::RouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.RouteResponse)
}
RouteResponse::RouteResponse(const RouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.total_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_time_ = from._impl_.total_time_;
  // @@protoc_insertion_point(copy_constructor:serializator.RouteResponse)
}

inline void RouteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.total_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteResponse::~RouteResponse() {
  // @@protoc_insertion_point(destructor:serializator.RouteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void RouteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.RouteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.total_time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double total_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .serializator.RouteItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.RouteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time = this->_internal_total_time();
  uint64_t raw_total_time;
  memcpy(&raw_total_time, &tmp_total_time, sizeof(tmp_total_time));
  if (raw_total_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time(), target);
  }

  // repeated .serializator.RouteItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.RouteResponse)
  return target;
}

size_t RouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.RouteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serializator.RouteItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double total_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time = this->_internal_total_time();
  uint64_t raw_total_time;
  memcpy(&raw_total_time, &tmp_total_time, sizeof(tmp_total_time));
  if (raw_total_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteResponse::GetClassData() const { return &_class_data_; }


void RouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteResponse*>(&to_msg);
  auto& from = static_cast<const RouteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.RouteResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time = from._internal_total_time();
  uint64_t raw_total_time;
  memcpy(&raw_total_time, &tmp_total_time, sizeof(tmp_total_time));
  if (raw_total_time != 0) {
    _this->_internal_set_total_time(from._internal_total_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteResponse::CopyFrom(const RouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.RouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteResponse::IsInitialized() const {
  return true;
}

void RouteResponse::InternalSwap(RouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.total_time_, other->_impl_.total_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[6]);
}

// ===================================================================

class StopDistance::_Internal {
 public:
};

StopDistance::StopDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.StopDistance)
}
StopDistance::StopDistance(const StopDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopDistance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_stop_){}
    , decltype(_impl_.to_stop_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.from_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_stop().empty()) {
    _this->_impl_.from_stop_.Set(from._internal_from_stop(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_stop().empty()) {
    _this->_impl_.to_stop_.Set(from._internal_to_stop(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:serializator.StopDistance)
}

inline void StopDistance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_stop_){}
    , decltype(_impl_.to_stop_){}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.from_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_stop_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopDistance::~StopDistance() {
  // @@protoc_insertion_point(destructor:serializator.StopDistance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopDistance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_stop_.Destroy();
  _impl_.to_stop_.Destroy();
}

void StopDistance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.StopDistance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_stop_.ClearToEmpty();
  _impl_.to_stop_.ClearToEmpty();
  _impl_.distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopDistance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from_stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from_stop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.StopDistance.from_stop"));
        } else
          goto handle_unusual;
        continue;
      // string to_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to_stop();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serializator.StopDistance.to_stop"));
        } else
          goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopDistance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.StopDistance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_stop = 1;
  if (!this->_internal_from_stop().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_stop().data(), static_cast<int>(this->_internal_from_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.StopDistance.from_stop");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_stop(), target);
  }

  // string to_stop = 2;
  if (!this->_internal_to_stop().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_stop().data(), static_cast<int>(this->_internal_to_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serializator.StopDistance.to_stop");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_stop(), target);
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.StopDistance)
  return target;
}

size_t StopDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.StopDistance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_stop = 1;
  if (!this->_internal_from_stop().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_stop());
  }

  // string to_stop = 2;
  if (!this->_internal_to_stop().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_stop());
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopDistance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopDistance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopDistance::GetClassData() const { return &_class_data_; }


void StopDistance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopDistance*>(&to_msg);
  auto& from = static_cast<const StopDistance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.StopDistance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from_stop().empty()) {
    _this->_internal_set_from_stop(from._internal_from_stop());
  }
  if (!from._internal_to_stop().empty()) {
    _this->_internal_set_to_stop(from._internal_to_stop());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopDistance::CopyFrom(const StopDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.StopDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDistance::IsInitialized() const {
  return true;
}

void StopDistance::InternalSwap(StopDistance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_stop_, lhs_arena,
      &other->_impl_.from_stop_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_stop_, lhs_arena,
      &other->_impl_.to_stop_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopDistance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[7]);
}

// ===================================================================

class Base::_Internal {
 public:
  static const ::serializator::RenderSettings& map_settings(const Base* msg);
};

const ::serializator::RenderSettings&
Base::_Internal::map_settings(const Base* msg) {
  return *msg->_impl_.map_settings_;
}
void Base::clear_map_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_settings_ != nullptr) {
    delete _impl_.map_settings_;
  }
  _impl_.map_settings_ = nullptr;
}
Base::Base(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serializator.Base)
}
Base::Base(const Base& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Base* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){from._impl_.buses_}
    , decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.stop_distance_map_){from._impl_.stop_distance_map_}
    , decltype(_impl_.map_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_settings()) {
    _this->_impl_.map_settings_ = new ::serializator::RenderSettings(*from._impl_.map_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:serializator.Base)
}

inline void Base::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){arena}
    , decltype(_impl_.stops_){arena}
    , decltype(_impl_.stop_distance_map_){arena}
    , decltype(_impl_.map_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:serializator.Base)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Base::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buses_.~RepeatedPtrField();
  _impl_.stops_.~RepeatedPtrField();
  _impl_.stop_distance_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.map_settings_;
}

void Base::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Base::Clear() {
// @@protoc_insertion_point(message_clear_start:serializator.Base)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buses_.Clear();
  _impl_.stops_.Clear();
  _impl_.stop_distance_map_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.map_settings_ != nullptr) {
    delete _impl_.map_settings_;
  }
  _impl_.map_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Base::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .serializator.BusRoute buses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .serializator.BusStop stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .serializator.StopDistance stop_distance_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_distance_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .serializator.RenderSettings map_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Base::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serializator.Base)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serializator.BusRoute buses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buses_size()); i < n; i++) {
    const auto& repfield = this->_internal_buses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .serializator.BusStop stops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .serializator.StopDistance stop_distance_map = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_distance_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_distance_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .serializator.RenderSettings map_settings = 4;
  if (this->_internal_has_map_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::map_settings(this),
        _Internal::map_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serializator.Base)
  return target;
}

size_t Base::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serializator.Base)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serializator.BusRoute buses = 1;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->_impl_.buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serializator.BusStop stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serializator.StopDistance stop_distance_map = 3;
  total_size += 1UL * this->_internal_stop_distance_map_size();
  for (const auto& msg : this->_impl_.stop_distance_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .serializator.RenderSettings map_settings = 4;
  if (this->_internal_has_map_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Base::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Base::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Base::GetClassData() const { return &_class_data_; }


void Base::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Base*>(&to_msg);
  auto& from = static_cast<const Base&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serializator.Base)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buses_.MergeFrom(from._impl_.buses_);
  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  _this->_impl_.stop_distance_map_.MergeFrom(from._impl_.stop_distance_map_);
  if (from._internal_has_map_settings()) {
    _this->_internal_mutable_map_settings()->::serializator::RenderSettings::MergeFrom(
        from._internal_map_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Base::CopyFrom(const Base& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serializator.Base)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  return true;
}

void Base::InternalSwap(Base* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buses_.InternalSwap(&other->_impl_.buses_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  _impl_.stop_distance_map_.InternalSwap(&other->_impl_.stop_distance_map_);
  swap(_impl_.map_settings_, other->_impl_.map_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Base::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serializator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serializator::Coordinates*
Arena::CreateMaybeMessage< ::serializator::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::BusStop*
Arena::CreateMaybeMessage< ::serializator::BusStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::BusStop >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::BusRoute*
Arena::CreateMaybeMessage< ::serializator::BusRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::BusRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::RouteStats*
Arena::CreateMaybeMessage< ::serializator::RouteStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::RouteStats >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::RouteSettings*
Arena::CreateMaybeMessage< ::serializator::RouteSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::RouteSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::RouteItem*
Arena::CreateMaybeMessage< ::serializator::RouteItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::RouteItem >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::RouteResponse*
Arena::CreateMaybeMessage< ::serializator::RouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::RouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::StopDistance*
Arena::CreateMaybeMessage< ::serializator::StopDistance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::StopDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::serializator::Base*
Arena::CreateMaybeMessage< ::serializator::Base >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serializator::Base >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
