// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace serializator {
class Base;
struct BaseDefaultTypeInternal;
extern BaseDefaultTypeInternal _Base_default_instance_;
class BusRoute;
struct BusRouteDefaultTypeInternal;
extern BusRouteDefaultTypeInternal _BusRoute_default_instance_;
class BusStop;
struct BusStopDefaultTypeInternal;
extern BusStopDefaultTypeInternal _BusStop_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class StopDistance;
struct StopDistanceDefaultTypeInternal;
extern StopDistanceDefaultTypeInternal _StopDistance_default_instance_;
}  // namespace serializator
PROTOBUF_NAMESPACE_OPEN
template<> ::serializator::Base* Arena::CreateMaybeMessage<::serializator::Base>(Arena*);
template<> ::serializator::BusRoute* Arena::CreateMaybeMessage<::serializator::BusRoute>(Arena*);
template<> ::serializator::BusStop* Arena::CreateMaybeMessage<::serializator::BusStop>(Arena*);
template<> ::serializator::Coordinates* Arena::CreateMaybeMessage<::serializator::Coordinates>(Arena*);
template<> ::serializator::StopDistance* Arena::CreateMaybeMessage<::serializator::StopDistance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serializator {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializator.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializator.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:serializator.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializator.BusStop) */ {
 public:
  inline BusStop() : BusStop(nullptr) {}
  ~BusStop() override;
  explicit PROTOBUF_CONSTEXPR BusStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusStop(const BusStop& from);
  BusStop(BusStop&& from) noexcept
    : BusStop() {
    *this = ::std::move(from);
  }

  inline BusStop& operator=(const BusStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusStop& operator=(BusStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusStop* internal_default_instance() {
    return reinterpret_cast<const BusStop*>(
               &_BusStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BusStop& a, BusStop& b) {
    a.Swap(&b);
  }
  inline void Swap(BusStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusStop& from) {
    BusStop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializator.BusStop";
  }
  protected:
  explicit BusStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .serializator.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::serializator::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::serializator::Coordinates* release_coordinates();
  ::serializator::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::serializator::Coordinates* coordinates);
  private:
  const ::serializator::Coordinates& _internal_coordinates() const;
  ::serializator::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::serializator::Coordinates* coordinates);
  ::serializator::Coordinates* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:serializator.BusStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::serializator::Coordinates* coordinates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusRoute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializator.BusRoute) */ {
 public:
  inline BusRoute() : BusRoute(nullptr) {}
  ~BusRoute() override;
  explicit PROTOBUF_CONSTEXPR BusRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusRoute(const BusRoute& from);
  BusRoute(BusRoute&& from) noexcept
    : BusRoute() {
    *this = ::std::move(from);
  }

  inline BusRoute& operator=(const BusRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusRoute& operator=(BusRoute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusRoute* internal_default_instance() {
    return reinterpret_cast<const BusRoute*>(
               &_BusRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BusRoute& a, BusRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(BusRoute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusRoute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusRoute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusRoute& from) {
    BusRoute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusRoute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializator.BusRoute";
  }
  protected:
  explicit BusRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kNumberFieldNumber = 1,
    kCircleFieldNumber = 3,
  };
  // repeated .serializator.BusStop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::serializator::BusStop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >*
      mutable_stops();
  private:
  const ::serializator::BusStop& _internal_stops(int index) const;
  ::serializator::BusStop* _internal_add_stops();
  public:
  const ::serializator::BusStop& stops(int index) const;
  ::serializator::BusStop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >&
      stops() const;

  // string number = 1;
  void clear_number();
  const std::string& number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_number();
  PROTOBUF_NODISCARD std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // bool circle = 3;
  void clear_circle();
  bool circle() const;
  void set_circle(bool value);
  private:
  bool _internal_circle() const;
  void _internal_set_circle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serializator.BusRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
    bool circle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopDistance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializator.StopDistance) */ {
 public:
  inline StopDistance() : StopDistance(nullptr) {}
  ~StopDistance() override;
  explicit PROTOBUF_CONSTEXPR StopDistance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopDistance(const StopDistance& from);
  StopDistance(StopDistance&& from) noexcept
    : StopDistance() {
    *this = ::std::move(from);
  }

  inline StopDistance& operator=(const StopDistance& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDistance& operator=(StopDistance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopDistance& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopDistance* internal_default_instance() {
    return reinterpret_cast<const StopDistance*>(
               &_StopDistance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopDistance& a, StopDistance& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDistance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDistance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopDistance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopDistance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopDistance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopDistance& from) {
    StopDistance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDistance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializator.StopDistance";
  }
  protected:
  explicit StopDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromStopFieldNumber = 1,
    kToStopFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string from_stop = 1;
  void clear_from_stop();
  const std::string& from_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_stop();
  PROTOBUF_NODISCARD std::string* release_from_stop();
  void set_allocated_from_stop(std::string* from_stop);
  private:
  const std::string& _internal_from_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_stop(const std::string& value);
  std::string* _internal_mutable_from_stop();
  public:

  // string to_stop = 2;
  void clear_to_stop();
  const std::string& to_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_stop();
  PROTOBUF_NODISCARD std::string* release_to_stop();
  void set_allocated_to_stop(std::string* to_stop);
  private:
  const std::string& _internal_to_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_stop(const std::string& value);
  std::string* _internal_mutable_to_stop();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:serializator.StopDistance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_stop_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Base final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serializator.Base) */ {
 public:
  inline Base() : Base(nullptr) {}
  ~Base() override;
  explicit PROTOBUF_CONSTEXPR Base(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Base(const Base& from);
  Base(Base&& from) noexcept
    : Base() {
    *this = ::std::move(from);
  }

  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }
  inline Base& operator=(Base&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Base& default_instance() {
    return *internal_default_instance();
  }
  static inline const Base* internal_default_instance() {
    return reinterpret_cast<const Base*>(
               &_Base_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Base& a, Base& b) {
    a.Swap(&b);
  }
  inline void Swap(Base* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Base* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Base* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Base>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Base& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Base& from) {
    Base::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serializator.Base";
  }
  protected:
  explicit Base(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kStopDistanceMapFieldNumber = 3,
    kMapSettingsFieldNumber = 4,
    kRouteSettingsFieldNumber = 5,
  };
  // repeated .serializator.BusRoute buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::serializator::BusRoute* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusRoute >*
      mutable_buses();
  private:
  const ::serializator::BusRoute& _internal_buses(int index) const;
  ::serializator::BusRoute* _internal_add_buses();
  public:
  const ::serializator::BusRoute& buses(int index) const;
  ::serializator::BusRoute* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusRoute >&
      buses() const;

  // repeated .serializator.BusStop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::serializator::BusStop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >*
      mutable_stops();
  private:
  const ::serializator::BusStop& _internal_stops(int index) const;
  ::serializator::BusStop* _internal_add_stops();
  public:
  const ::serializator::BusStop& stops(int index) const;
  ::serializator::BusStop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >&
      stops() const;

  // repeated .serializator.StopDistance stop_distance_map = 3;
  int stop_distance_map_size() const;
  private:
  int _internal_stop_distance_map_size() const;
  public:
  void clear_stop_distance_map();
  ::serializator::StopDistance* mutable_stop_distance_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::StopDistance >*
      mutable_stop_distance_map();
  private:
  const ::serializator::StopDistance& _internal_stop_distance_map(int index) const;
  ::serializator::StopDistance* _internal_add_stop_distance_map();
  public:
  const ::serializator::StopDistance& stop_distance_map(int index) const;
  ::serializator::StopDistance* add_stop_distance_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::StopDistance >&
      stop_distance_map() const;

  // .serializator.RenderSettings map_settings = 4;
  bool has_map_settings() const;
  private:
  bool _internal_has_map_settings() const;
  public:
  void clear_map_settings();
  const ::serializator::RenderSettings& map_settings() const;
  PROTOBUF_NODISCARD ::serializator::RenderSettings* release_map_settings();
  ::serializator::RenderSettings* mutable_map_settings();
  void set_allocated_map_settings(::serializator::RenderSettings* map_settings);
  private:
  const ::serializator::RenderSettings& _internal_map_settings() const;
  ::serializator::RenderSettings* _internal_mutable_map_settings();
  public:
  void unsafe_arena_set_allocated_map_settings(
      ::serializator::RenderSettings* map_settings);
  ::serializator::RenderSettings* unsafe_arena_release_map_settings();

  // .serializator.RouteSettings route_settings = 5;
  bool has_route_settings() const;
  private:
  bool _internal_has_route_settings() const;
  public:
  void clear_route_settings();
  const ::serializator::RouteSettings& route_settings() const;
  PROTOBUF_NODISCARD ::serializator::RouteSettings* release_route_settings();
  ::serializator::RouteSettings* mutable_route_settings();
  void set_allocated_route_settings(::serializator::RouteSettings* route_settings);
  private:
  const ::serializator::RouteSettings& _internal_route_settings() const;
  ::serializator::RouteSettings* _internal_mutable_route_settings();
  public:
  void unsafe_arena_set_allocated_route_settings(
      ::serializator::RouteSettings* route_settings);
  ::serializator::RouteSettings* unsafe_arena_release_route_settings();

  // @@protoc_insertion_point(class_scope:serializator.Base)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusRoute > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::StopDistance > stop_distance_map_;
    ::serializator::RenderSettings* map_settings_;
    ::serializator::RouteSettings* route_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double latitude = 1;
inline void Coordinates::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Coordinates::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:serializator.Coordinates.latitude)
  return _internal_latitude();
}
inline void Coordinates::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Coordinates::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:serializator.Coordinates.latitude)
}

// double longitude = 2;
inline void Coordinates::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Coordinates::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:serializator.Coordinates.longitude)
  return _internal_longitude();
}
inline void Coordinates::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Coordinates::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:serializator.Coordinates.longitude)
}

// -------------------------------------------------------------------

// BusStop

// string name = 1;
inline void BusStop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BusStop::name() const {
  // @@protoc_insertion_point(field_get:serializator.BusStop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusStop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serializator.BusStop.name)
}
inline std::string* BusStop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serializator.BusStop.name)
  return _s;
}
inline const std::string& BusStop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BusStop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BusStop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BusStop::release_name() {
  // @@protoc_insertion_point(field_release:serializator.BusStop.name)
  return _impl_.name_.Release();
}
inline void BusStop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serializator.BusStop.name)
}

// .serializator.Coordinates coordinates = 2;
inline bool BusStop::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool BusStop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void BusStop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::serializator::Coordinates& BusStop::_internal_coordinates() const {
  const ::serializator::Coordinates* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::serializator::Coordinates&>(
      ::serializator::_Coordinates_default_instance_);
}
inline const ::serializator::Coordinates& BusStop::coordinates() const {
  // @@protoc_insertion_point(field_get:serializator.BusStop.coordinates)
  return _internal_coordinates();
}
inline void BusStop::unsafe_arena_set_allocated_coordinates(
    ::serializator::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serializator.BusStop.coordinates)
}
inline ::serializator::Coordinates* BusStop::release_coordinates() {
  
  ::serializator::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serializator::Coordinates* BusStop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:serializator.BusStop.coordinates)
  
  ::serializator::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::serializator::Coordinates* BusStop::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::serializator::Coordinates>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::serializator::Coordinates* BusStop::mutable_coordinates() {
  ::serializator::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:serializator.BusStop.coordinates)
  return _msg;
}
inline void BusStop::set_allocated_coordinates(::serializator::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:serializator.BusStop.coordinates)
}

// -------------------------------------------------------------------

// BusRoute

// string number = 1;
inline void BusRoute::clear_number() {
  _impl_.number_.ClearToEmpty();
}
inline const std::string& BusRoute::number() const {
  // @@protoc_insertion_point(field_get:serializator.BusRoute.number)
  return _internal_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusRoute::set_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serializator.BusRoute.number)
}
inline std::string* BusRoute::mutable_number() {
  std::string* _s = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:serializator.BusRoute.number)
  return _s;
}
inline const std::string& BusRoute::_internal_number() const {
  return _impl_.number_.Get();
}
inline void BusRoute::_internal_set_number(const std::string& value) {
  
  _impl_.number_.Set(value, GetArenaForAllocation());
}
inline std::string* BusRoute::_internal_mutable_number() {
  
  return _impl_.number_.Mutable(GetArenaForAllocation());
}
inline std::string* BusRoute::release_number() {
  // @@protoc_insertion_point(field_release:serializator.BusRoute.number)
  return _impl_.number_.Release();
}
inline void BusRoute::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.number_.IsDefault()) {
    _impl_.number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serializator.BusRoute.number)
}

// repeated .serializator.BusStop stops = 2;
inline int BusRoute::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int BusRoute::stops_size() const {
  return _internal_stops_size();
}
inline void BusRoute::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::serializator::BusStop* BusRoute::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:serializator.BusRoute.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >*
BusRoute::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:serializator.BusRoute.stops)
  return &_impl_.stops_;
}
inline const ::serializator::BusStop& BusRoute::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::serializator::BusStop& BusRoute::stops(int index) const {
  // @@protoc_insertion_point(field_get:serializator.BusRoute.stops)
  return _internal_stops(index);
}
inline ::serializator::BusStop* BusRoute::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::serializator::BusStop* BusRoute::add_stops() {
  ::serializator::BusStop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:serializator.BusRoute.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >&
BusRoute::stops() const {
  // @@protoc_insertion_point(field_list:serializator.BusRoute.stops)
  return _impl_.stops_;
}

// bool circle = 3;
inline void BusRoute::clear_circle() {
  _impl_.circle_ = false;
}
inline bool BusRoute::_internal_circle() const {
  return _impl_.circle_;
}
inline bool BusRoute::circle() const {
  // @@protoc_insertion_point(field_get:serializator.BusRoute.circle)
  return _internal_circle();
}
inline void BusRoute::_internal_set_circle(bool value) {
  
  _impl_.circle_ = value;
}
inline void BusRoute::set_circle(bool value) {
  _internal_set_circle(value);
  // @@protoc_insertion_point(field_set:serializator.BusRoute.circle)
}

// -------------------------------------------------------------------

// StopDistance

// string from_stop = 1;
inline void StopDistance::clear_from_stop() {
  _impl_.from_stop_.ClearToEmpty();
}
inline const std::string& StopDistance::from_stop() const {
  // @@protoc_insertion_point(field_get:serializator.StopDistance.from_stop)
  return _internal_from_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopDistance::set_from_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serializator.StopDistance.from_stop)
}
inline std::string* StopDistance::mutable_from_stop() {
  std::string* _s = _internal_mutable_from_stop();
  // @@protoc_insertion_point(field_mutable:serializator.StopDistance.from_stop)
  return _s;
}
inline const std::string& StopDistance::_internal_from_stop() const {
  return _impl_.from_stop_.Get();
}
inline void StopDistance::_internal_set_from_stop(const std::string& value) {
  
  _impl_.from_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* StopDistance::_internal_mutable_from_stop() {
  
  return _impl_.from_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* StopDistance::release_from_stop() {
  // @@protoc_insertion_point(field_release:serializator.StopDistance.from_stop)
  return _impl_.from_stop_.Release();
}
inline void StopDistance::set_allocated_from_stop(std::string* from_stop) {
  if (from_stop != nullptr) {
    
  } else {
    
  }
  _impl_.from_stop_.SetAllocated(from_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_stop_.IsDefault()) {
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serializator.StopDistance.from_stop)
}

// string to_stop = 2;
inline void StopDistance::clear_to_stop() {
  _impl_.to_stop_.ClearToEmpty();
}
inline const std::string& StopDistance::to_stop() const {
  // @@protoc_insertion_point(field_get:serializator.StopDistance.to_stop)
  return _internal_to_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopDistance::set_to_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serializator.StopDistance.to_stop)
}
inline std::string* StopDistance::mutable_to_stop() {
  std::string* _s = _internal_mutable_to_stop();
  // @@protoc_insertion_point(field_mutable:serializator.StopDistance.to_stop)
  return _s;
}
inline const std::string& StopDistance::_internal_to_stop() const {
  return _impl_.to_stop_.Get();
}
inline void StopDistance::_internal_set_to_stop(const std::string& value) {
  
  _impl_.to_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* StopDistance::_internal_mutable_to_stop() {
  
  return _impl_.to_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* StopDistance::release_to_stop() {
  // @@protoc_insertion_point(field_release:serializator.StopDistance.to_stop)
  return _impl_.to_stop_.Release();
}
inline void StopDistance::set_allocated_to_stop(std::string* to_stop) {
  if (to_stop != nullptr) {
    
  } else {
    
  }
  _impl_.to_stop_.SetAllocated(to_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_stop_.IsDefault()) {
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serializator.StopDistance.to_stop)
}

// double distance = 3;
inline void StopDistance::clear_distance() {
  _impl_.distance_ = 0;
}
inline double StopDistance::_internal_distance() const {
  return _impl_.distance_;
}
inline double StopDistance::distance() const {
  // @@protoc_insertion_point(field_get:serializator.StopDistance.distance)
  return _internal_distance();
}
inline void StopDistance::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void StopDistance::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:serializator.StopDistance.distance)
}

// -------------------------------------------------------------------

// Base

// repeated .serializator.BusRoute buses = 1;
inline int Base::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int Base::buses_size() const {
  return _internal_buses_size();
}
inline void Base::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::serializator::BusRoute* Base::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:serializator.Base.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusRoute >*
Base::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:serializator.Base.buses)
  return &_impl_.buses_;
}
inline const ::serializator::BusRoute& Base::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::serializator::BusRoute& Base::buses(int index) const {
  // @@protoc_insertion_point(field_get:serializator.Base.buses)
  return _internal_buses(index);
}
inline ::serializator::BusRoute* Base::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::serializator::BusRoute* Base::add_buses() {
  ::serializator::BusRoute* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:serializator.Base.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusRoute >&
Base::buses() const {
  // @@protoc_insertion_point(field_list:serializator.Base.buses)
  return _impl_.buses_;
}

// repeated .serializator.BusStop stops = 2;
inline int Base::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Base::stops_size() const {
  return _internal_stops_size();
}
inline void Base::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::serializator::BusStop* Base::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:serializator.Base.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >*
Base::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:serializator.Base.stops)
  return &_impl_.stops_;
}
inline const ::serializator::BusStop& Base::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::serializator::BusStop& Base::stops(int index) const {
  // @@protoc_insertion_point(field_get:serializator.Base.stops)
  return _internal_stops(index);
}
inline ::serializator::BusStop* Base::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::serializator::BusStop* Base::add_stops() {
  ::serializator::BusStop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:serializator.Base.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::BusStop >&
Base::stops() const {
  // @@protoc_insertion_point(field_list:serializator.Base.stops)
  return _impl_.stops_;
}

// repeated .serializator.StopDistance stop_distance_map = 3;
inline int Base::_internal_stop_distance_map_size() const {
  return _impl_.stop_distance_map_.size();
}
inline int Base::stop_distance_map_size() const {
  return _internal_stop_distance_map_size();
}
inline void Base::clear_stop_distance_map() {
  _impl_.stop_distance_map_.Clear();
}
inline ::serializator::StopDistance* Base::mutable_stop_distance_map(int index) {
  // @@protoc_insertion_point(field_mutable:serializator.Base.stop_distance_map)
  return _impl_.stop_distance_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::StopDistance >*
Base::mutable_stop_distance_map() {
  // @@protoc_insertion_point(field_mutable_list:serializator.Base.stop_distance_map)
  return &_impl_.stop_distance_map_;
}
inline const ::serializator::StopDistance& Base::_internal_stop_distance_map(int index) const {
  return _impl_.stop_distance_map_.Get(index);
}
inline const ::serializator::StopDistance& Base::stop_distance_map(int index) const {
  // @@protoc_insertion_point(field_get:serializator.Base.stop_distance_map)
  return _internal_stop_distance_map(index);
}
inline ::serializator::StopDistance* Base::_internal_add_stop_distance_map() {
  return _impl_.stop_distance_map_.Add();
}
inline ::serializator::StopDistance* Base::add_stop_distance_map() {
  ::serializator::StopDistance* _add = _internal_add_stop_distance_map();
  // @@protoc_insertion_point(field_add:serializator.Base.stop_distance_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serializator::StopDistance >&
Base::stop_distance_map() const {
  // @@protoc_insertion_point(field_list:serializator.Base.stop_distance_map)
  return _impl_.stop_distance_map_;
}

// .serializator.RenderSettings map_settings = 4;
inline bool Base::_internal_has_map_settings() const {
  return this != internal_default_instance() && _impl_.map_settings_ != nullptr;
}
inline bool Base::has_map_settings() const {
  return _internal_has_map_settings();
}
inline const ::serializator::RenderSettings& Base::_internal_map_settings() const {
  const ::serializator::RenderSettings* p = _impl_.map_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serializator::RenderSettings&>(
      ::serializator::_RenderSettings_default_instance_);
}
inline const ::serializator::RenderSettings& Base::map_settings() const {
  // @@protoc_insertion_point(field_get:serializator.Base.map_settings)
  return _internal_map_settings();
}
inline void Base::unsafe_arena_set_allocated_map_settings(
    ::serializator::RenderSettings* map_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_settings_);
  }
  _impl_.map_settings_ = map_settings;
  if (map_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serializator.Base.map_settings)
}
inline ::serializator::RenderSettings* Base::release_map_settings() {
  
  ::serializator::RenderSettings* temp = _impl_.map_settings_;
  _impl_.map_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serializator::RenderSettings* Base::unsafe_arena_release_map_settings() {
  // @@protoc_insertion_point(field_release:serializator.Base.map_settings)
  
  ::serializator::RenderSettings* temp = _impl_.map_settings_;
  _impl_.map_settings_ = nullptr;
  return temp;
}
inline ::serializator::RenderSettings* Base::_internal_mutable_map_settings() {
  
  if (_impl_.map_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serializator::RenderSettings>(GetArenaForAllocation());
    _impl_.map_settings_ = p;
  }
  return _impl_.map_settings_;
}
inline ::serializator::RenderSettings* Base::mutable_map_settings() {
  ::serializator::RenderSettings* _msg = _internal_mutable_map_settings();
  // @@protoc_insertion_point(field_mutable:serializator.Base.map_settings)
  return _msg;
}
inline void Base::set_allocated_map_settings(::serializator::RenderSettings* map_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_settings_);
  }
  if (map_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_settings));
    if (message_arena != submessage_arena) {
      map_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_settings_ = map_settings;
  // @@protoc_insertion_point(field_set_allocated:serializator.Base.map_settings)
}

// .serializator.RouteSettings route_settings = 5;
inline bool Base::_internal_has_route_settings() const {
  return this != internal_default_instance() && _impl_.route_settings_ != nullptr;
}
inline bool Base::has_route_settings() const {
  return _internal_has_route_settings();
}
inline const ::serializator::RouteSettings& Base::_internal_route_settings() const {
  const ::serializator::RouteSettings* p = _impl_.route_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serializator::RouteSettings&>(
      ::serializator::_RouteSettings_default_instance_);
}
inline const ::serializator::RouteSettings& Base::route_settings() const {
  // @@protoc_insertion_point(field_get:serializator.Base.route_settings)
  return _internal_route_settings();
}
inline void Base::unsafe_arena_set_allocated_route_settings(
    ::serializator::RouteSettings* route_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_settings_);
  }
  _impl_.route_settings_ = route_settings;
  if (route_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serializator.Base.route_settings)
}
inline ::serializator::RouteSettings* Base::release_route_settings() {
  
  ::serializator::RouteSettings* temp = _impl_.route_settings_;
  _impl_.route_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serializator::RouteSettings* Base::unsafe_arena_release_route_settings() {
  // @@protoc_insertion_point(field_release:serializator.Base.route_settings)
  
  ::serializator::RouteSettings* temp = _impl_.route_settings_;
  _impl_.route_settings_ = nullptr;
  return temp;
}
inline ::serializator::RouteSettings* Base::_internal_mutable_route_settings() {
  
  if (_impl_.route_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serializator::RouteSettings>(GetArenaForAllocation());
    _impl_.route_settings_ = p;
  }
  return _impl_.route_settings_;
}
inline ::serializator::RouteSettings* Base::mutable_route_settings() {
  ::serializator::RouteSettings* _msg = _internal_mutable_route_settings();
  // @@protoc_insertion_point(field_mutable:serializator.Base.route_settings)
  return _msg;
}
inline void Base::set_allocated_route_settings(::serializator::RouteSettings* route_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_settings_);
  }
  if (route_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_settings));
    if (message_arena != submessage_arena) {
      route_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.route_settings_ = route_settings;
  // @@protoc_insertion_point(field_set_allocated:serializator.Base.route_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serializator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
